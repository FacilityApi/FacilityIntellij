/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package io.github.facilityapi.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.facilityapi.intellij.psi.FsdTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/justin/projects/FacilityIntellij/src/main/kotlin/io/github/facilityapi/intellij/lexer/_FsdLexer.flex</tt>
 */
public class _FsdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MARKDOWN_SECTION = 2;
  public static final int SERVICE_ATTRIBUTE = 4;
  public static final int SERVICE_ATTRIBUTE_PARAMETER_LIST = 6;
  public static final int SERVICE_ATTRIBUTE_ARGUMENT = 8;
  public static final int SERVICE_BODY = 10;
  public static final int SERVICE_BODY_ATTRIBUTE = 12;
  public static final int SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST = 14;
  public static final int SERVICE_BODY_ATTRIBUTE_ARGUMENT = 16;
  public static final int METHOD_BODY = 18;
  public static final int METHOD_BODY_TYPE = 20;
  public static final int METHOD_BODY_ATTRIBUTE = 22;
  public static final int METHOD_BODY_ATTRIBUTE_PARAMETER_LIST = 24;
  public static final int METHOD_BODY_ATTRIBUTE_ARGUMENT = 26;
  public static final int RESPONSE_SEPARATOR = 28;
  public static final int RESPONSE_BODY = 30;
  public static final int RESPONSE_BODY_TYPE = 32;
  public static final int RESPONSE_BODY_ATTRIBUTE = 34;
  public static final int RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST = 36;
  public static final int RESPONSE_BODY_ATTRIBUTE_ARGUMENT = 38;
  public static final int DATA_BODY = 40;
  public static final int DATA_BODY_TYPE = 42;
  public static final int DATA_BODY_ATTRIBUTE = 44;
  public static final int DATA_BODY_ATTRIBUTE_PARAMETER_LIST = 46;
  public static final int DATA_BODY_ATTRIBUTE_ARGUMENT = 48;
  public static final int LIST_BODY = 50;
  public static final int LIST_BODY_ATTRIBUTE = 52;
  public static final int LIST_BODY_ATTRIBUTE_PARAMETER_LIST = 54;
  public static final int LIST_BODY_ATTRIBUTE_ARGUMENT = 56;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\0\1\10\1\20\1\6\3\0\1\31\1\32\1\0\1\17\1"+
    "\33\2\17\1\5\2\15\1\51\1\50\1\53\1\15\1\52\3\15\1\34\1\61\1\57\1\0\1\60\2"+
    "\0\32\15\1\27\1\11\1\30\1\14\1\15\1\14\1\42\1\46\1\26\1\41\1\22\1\16\1\45"+
    "\1\37\1\25\1\55\1\7\1\47\1\35\1\12\1\40\1\56\1\7\1\23\1\21\1\36\1\13\1\24"+
    "\2\7\1\54\1\7\1\43\1\0\1\44\7\0\1\1\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1"+
    "\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\1\2\2\1\1\3\1\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\2\20\1\21\2\20\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\1\1\31\1\32"+
    "\1\33\5\34\1\35\4\34\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\1\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\1"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\1\1\70\1\71\1\72\1\73\1\74\1\75\1\1"+
    "\3\0\1\16\1\0\4\20\1\0\1\30\1\0\12\34"+
    "\1\0\1\45\2\0\1\57\2\0\1\67\2\0\1\75"+
    "\1\0\3\76\2\0\4\20\1\0\4\34\1\77\5\34"+
    "\6\0\1\100\2\20\1\101\1\0\12\34\6\0\2\20"+
    "\1\0\1\34\1\102\1\34\1\103\1\104\4\34\1\105"+
    "\6\0\1\106\1\107\1\0\1\110\1\111\1\112\1\34"+
    "\1\113\1\34\4\0\1\114\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u05aa\0\u05aa\0\u0672\0\u05aa\0\u06a4\0\u06d6\0\u05aa"+
    "\0\u05aa\0\u05aa\0\u05aa\0\u0708\0\u05aa\0\u073a\0\u076c\0\u05aa"+
    "\0\u079e\0\u07d0\0\u05aa\0\u0802\0\u0834\0\u05aa\0\u05aa\0\u05aa"+
    "\0\u05aa\0\u0866\0\u05aa\0\u0898\0\u08ca\0\u05aa\0\u05aa\0\u05aa"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u05aa\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u0abe"+
    "\0\u05aa\0\u0af0\0\u0b22\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa"+
    "\0\u05aa\0\u05aa\0\u0b54\0\u05aa\0\u0b86\0\u0bb8\0\u05aa\0\u05aa"+
    "\0\u05aa\0\u05aa\0\u05aa\0\u0bea\0\u05aa\0\u0c1c\0\u0c4e\0\u05aa"+
    "\0\u05aa\0\u05aa\0\u0c80\0\u05aa\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u076c\0\u05aa\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u08ca"+
    "\0\u05aa\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u0b22\0\u05aa\0\u109a\0\u0bb8"+
    "\0\u05aa\0\u10cc\0\u0c4e\0\u05aa\0\u10fe\0\u0ce4\0\u05aa\0\u1130"+
    "\0\u05aa\0\u1162\0\u0d16\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u08fc\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u079e\0\u15e0\0\u1612\0\u079e\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u1a2c\0\u08fc\0\u1a5e\0\u08fc\0\u08fc\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u08fc\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u079e\0\u079e\0\u1c84\0\u08fc\0\u08fc\0\u08fc"+
    "\0\u1cb6\0\u08fc\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u05aa"+
    "\0\u08fc\0\u08fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\4\37\1\40\13\36\1\41\5\36\1\42\1\43"+
    "\31\36\1\44\1\36\2\45\14\44\1\46\41\44\1\36"+
    "\4\37\2\36\1\47\2\36\2\47\1\36\2\47\2\36"+
    "\6\47\1\36\1\50\1\51\1\52\1\53\1\36\6\47"+
    "\2\36\12\47\4\36\4\37\2\36\1\54\2\36\2\54"+
    "\1\36\2\54\2\36\6\54\3\36\1\55\1\53\1\36"+
    "\6\54\2\36\12\54\4\36\4\37\2\36\1\56\1\57"+
    "\1\36\2\56\1\36\3\56\1\36\6\56\5\36\1\60"+
    "\6\56\2\36\12\56\4\36\4\37\1\40\1\36\1\61"+
    "\2\36\2\61\1\36\2\61\2\36\1\61\1\62\4\61"+
    "\1\63\1\43\4\36\1\64\3\61\1\65\1\61\1\66"+
    "\1\67\12\61\4\36\4\37\2\36\1\47\2\36\2\47"+
    "\1\36\2\47\2\36\6\47\1\36\1\70\1\71\1\52"+
    "\1\53\1\36\6\47\2\36\12\47\4\36\4\37\2\36"+
    "\1\72\2\36\2\72\1\36\2\72\2\36\6\72\3\36"+
    "\1\73\1\53\1\36\6\72\2\36\12\72\4\36\4\37"+
    "\2\36\1\74\1\75\1\36\2\74\1\36\3\74\1\36"+
    "\6\74\5\36\1\60\6\74\2\36\12\74\4\36\4\37"+
    "\1\40\1\36\1\61\2\36\2\61\1\36\2\61\2\36"+
    "\6\61\1\76\1\43\3\36\1\77\6\61\1\66\1\100"+
    "\12\61\4\36\4\37\2\36\1\101\2\36\2\101\1\36"+
    "\2\101\2\36\1\102\1\103\1\104\1\101\1\105\1\101"+
    "\1\106\1\43\4\36\1\107\2\101\1\110\1\111\1\101"+
    "\2\36\1\101\1\112\10\101\1\113\1\114\1\115\1\36"+
    "\4\37\2\36\1\47\2\36\2\47\1\36\2\47\2\36"+
    "\6\47\1\36\1\116\1\117\1\52\1\53\1\36\6\47"+
    "\2\36\12\47\4\36\4\37\2\36\1\120\2\36\2\120"+
    "\1\36\2\120\2\36\6\120\3\36\1\121\1\53\1\36"+
    "\6\120\2\36\12\120\4\36\4\37\2\36\1\122\1\123"+
    "\1\36\2\122\1\36\3\122\1\36\6\122\5\36\1\60"+
    "\6\122\2\36\12\122\37\36\1\124\26\36\4\37\1\40"+
    "\1\36\1\61\2\36\2\61\1\36\2\61\2\36\6\61"+
    "\1\125\1\43\3\36\1\126\6\61\1\66\1\127\12\61"+
    "\4\36\4\37\2\36\1\101\2\36\2\101\1\36\2\101"+
    "\2\36\1\102\1\103\1\104\1\101\1\105\1\101\1\106"+
    "\1\43\4\36\1\107\2\101\1\110\1\111\1\101\2\36"+
    "\1\101\1\112\10\101\1\113\1\114\1\130\1\36\4\37"+
    "\2\36\1\47\2\36\2\47\1\36\2\47\2\36\6\47"+
    "\1\36\1\131\1\132\1\52\1\53\1\36\6\47\2\36"+
    "\12\47\4\36\4\37\2\36\1\133\2\36\2\133\1\36"+
    "\2\133\2\36\6\133\3\36\1\134\1\53\1\36\6\133"+
    "\2\36\12\133\4\36\4\37\2\36\1\135\1\136\1\36"+
    "\2\135\1\36\3\135\1\36\6\135\5\36\1\60\6\135"+
    "\2\36\12\135\4\36\4\37\1\40\1\36\1\61\2\36"+
    "\2\61\1\36\2\61\2\36\6\61\1\137\1\43\3\36"+
    "\1\140\6\61\1\66\1\127\12\61\4\36\4\37\2\36"+
    "\1\101\2\36\2\101\1\36\2\101\2\36\1\102\1\103"+
    "\1\104\1\101\1\105\1\101\1\106\1\43\4\36\1\107"+
    "\2\101\1\110\1\111\1\101\2\36\1\101\1\112\10\101"+
    "\1\113\1\114\1\141\1\36\4\37\2\36\1\47\2\36"+
    "\2\47\1\36\2\47\2\36\6\47\1\36\1\142\1\143"+
    "\1\52\1\53\1\36\6\47\2\36\12\47\4\36\4\37"+
    "\2\36\1\144\2\36\2\144\1\36\2\144\2\36\6\144"+
    "\3\36\1\145\1\53\1\36\6\144\2\36\12\144\4\36"+
    "\4\37\2\36\1\146\1\147\1\36\2\146\1\36\3\146"+
    "\1\36\6\146\5\36\1\60\6\146\2\36\12\146\4\36"+
    "\4\37\1\40\1\36\1\61\2\36\2\61\1\36\2\61"+
    "\2\36\6\61\1\150\1\43\2\36\1\53\1\36\6\61"+
    "\1\66\1\127\12\61\4\36\4\37\2\36\1\47\2\36"+
    "\2\47\1\36\2\47\2\36\6\47\1\36\1\151\1\152"+
    "\1\52\1\53\1\36\6\47\2\36\12\47\4\36\4\37"+
    "\2\36\1\153\2\36\2\153\1\36\2\153\2\36\6\153"+
    "\3\36\1\154\1\53\1\36\6\153\2\36\12\153\4\36"+
    "\4\37\2\36\1\155\1\156\1\36\2\155\1\36\3\155"+
    "\1\36\6\155\5\36\1\60\6\155\2\36\12\155\3\36"+
    "\63\0\4\37\62\0\1\157\76\0\1\160\37\0\1\44"+
    "\3\0\56\44\2\46\2\0\56\46\7\0\1\47\2\0"+
    "\2\47\1\0\2\47\2\0\6\47\6\0\6\47\2\0"+
    "\12\47\12\0\1\54\2\0\2\54\1\0\2\54\2\0"+
    "\6\54\6\0\6\54\2\0\12\54\12\0\1\56\2\0"+
    "\2\56\1\0\3\56\1\0\6\56\6\0\6\56\2\0"+
    "\12\56\3\0\10\161\1\162\1\163\50\161\7\0\1\61"+
    "\2\0\2\61\1\0\2\61\2\0\6\61\6\0\6\61"+
    "\2\0\12\61\12\0\1\61\2\0\1\164\1\61\1\0"+
    "\2\61\2\0\2\61\1\165\3\61\6\0\6\61\2\0"+
    "\12\61\12\0\1\61\2\0\2\61\1\0\2\61\2\0"+
    "\1\61\1\166\4\61\6\0\6\61\2\0\12\61\12\0"+
    "\1\61\2\0\2\61\1\0\2\61\2\0\6\61\6\0"+
    "\5\61\1\167\2\0\12\61\12\0\1\72\2\0\2\72"+
    "\1\0\2\72\2\0\6\72\6\0\6\72\2\0\12\72"+
    "\12\0\1\74\2\0\2\74\1\0\3\74\1\0\6\74"+
    "\6\0\6\74\2\0\12\74\3\0\10\170\1\171\1\172"+
    "\50\170\7\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\6\101\6\0\6\101\2\0\12\101\12\0\1\101\2\0"+
    "\2\101\1\0\2\101\2\0\6\101\6\0\1\101\1\173"+
    "\4\101\2\0\12\101\12\0\1\101\2\0\2\101\1\0"+
    "\2\101\2\0\2\101\1\174\3\101\6\0\6\101\2\0"+
    "\12\101\12\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\1\101\1\175\4\101\6\0\6\101\2\0\12\101\12\0"+
    "\1\101\2\0\1\176\1\101\1\0\2\101\2\0\6\101"+
    "\6\0\6\101\2\0\12\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\6\101\6\0\5\101\1\177\2\0"+
    "\12\101\12\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\6\101\6\0\6\101\2\0\1\101\1\200\10\101\12\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\1\101\1\201"+
    "\4\101\6\0\3\101\1\202\2\101\2\0\12\101\12\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\6\101\6\0"+
    "\3\101\1\203\2\101\2\0\7\101\1\204\2\101\12\0"+
    "\1\120\2\0\2\120\1\0\2\120\2\0\6\120\6\0"+
    "\6\120\2\0\12\120\12\0\1\122\2\0\2\122\1\0"+
    "\3\122\1\0\6\122\6\0\6\122\2\0\12\122\3\0"+
    "\10\205\1\206\1\207\50\205\7\0\1\133\2\0\2\133"+
    "\1\0\2\133\2\0\6\133\6\0\6\133\2\0\12\133"+
    "\12\0\1\135\2\0\2\135\1\0\3\135\1\0\6\135"+
    "\6\0\6\135\2\0\12\135\3\0\10\210\1\211\1\212"+
    "\50\210\7\0\1\144\2\0\2\144\1\0\2\144\2\0"+
    "\6\144\6\0\6\144\2\0\12\144\12\0\1\146\2\0"+
    "\2\146\1\0\3\146\1\0\6\146\6\0\6\146\2\0"+
    "\12\146\3\0\10\213\1\214\1\215\50\213\7\0\1\153"+
    "\2\0\2\153\1\0\2\153\2\0\6\153\6\0\6\153"+
    "\2\0\12\153\12\0\1\155\2\0\2\155\1\0\3\155"+
    "\1\0\6\155\6\0\6\155\2\0\12\155\3\0\10\216"+
    "\1\217\1\220\50\216\2\157\1\221\1\222\2\157\1\223"+
    "\53\157\23\0\1\224\43\0\1\161\2\0\3\161\1\225"+
    "\2\0\1\161\4\0\1\161\12\0\1\161\7\0\1\161"+
    "\22\0\1\61\2\0\1\61\1\226\1\0\2\61\2\0"+
    "\6\61\6\0\6\61\2\0\12\61\12\0\1\61\2\0"+
    "\2\61\1\0\2\61\2\0\2\61\1\227\3\61\6\0"+
    "\6\61\2\0\12\61\12\0\1\61\2\0\2\61\1\0"+
    "\2\61\2\0\6\61\6\0\1\61\1\230\4\61\2\0"+
    "\12\61\12\0\1\61\2\0\2\61\1\0\2\61\2\0"+
    "\6\61\6\0\1\61\1\231\4\61\2\0\12\61\10\0"+
    "\1\170\2\0\3\170\1\232\2\0\1\170\4\0\1\170"+
    "\12\0\1\170\7\0\1\170\22\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\2\101\1\233\3\101\6\0\6\101"+
    "\2\0\12\101\12\0\1\101\2\0\2\101\1\0\2\101"+
    "\2\0\2\101\1\234\3\101\6\0\6\101\2\0\12\101"+
    "\12\0\1\101\2\0\2\101\1\0\2\101\2\0\1\235"+
    "\5\101\6\0\6\101\2\0\12\101\12\0\1\101\2\0"+
    "\2\101\1\0\2\101\2\0\6\101\6\0\1\101\1\236"+
    "\4\101\2\0\12\101\12\0\1\101\2\0\2\101\1\0"+
    "\2\101\2\0\6\101\6\0\6\101\2\0\11\101\1\237"+
    "\12\0\1\101\2\0\2\101\1\0\2\101\2\0\6\101"+
    "\6\0\6\101\2\0\10\101\1\240\1\101\12\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\5\101\1\241\6\0"+
    "\6\101\2\0\12\101\12\0\1\101\2\0\1\101\1\242"+
    "\1\0\2\101\2\0\6\101\6\0\6\101\2\0\12\101"+
    "\12\0\1\101\2\0\2\101\1\0\2\101\2\0\6\101"+
    "\6\0\3\101\1\243\2\101\2\0\12\101\12\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\6\101\6\0\1\101"+
    "\1\244\4\101\2\0\12\101\10\0\1\205\2\0\3\205"+
    "\1\245\2\0\1\205\4\0\1\205\12\0\1\205\7\0"+
    "\1\205\20\0\1\210\2\0\3\210\1\246\2\0\1\210"+
    "\4\0\1\210\12\0\1\210\7\0\1\210\20\0\1\213"+
    "\2\0\3\213\1\247\2\0\1\213\4\0\1\213\12\0"+
    "\1\213\7\0\1\213\20\0\1\216\2\0\3\216\1\250"+
    "\2\0\1\216\4\0\1\216\12\0\1\216\7\0\1\216"+
    "\15\0\1\221\103\0\1\251\46\0\1\252\2\0\3\252"+
    "\3\0\1\252\3\0\3\252\10\0\2\252\3\0\1\252"+
    "\1\0\4\252\15\0\1\61\2\0\2\61\1\0\2\61"+
    "\2\0\6\61\6\0\1\253\5\61\2\0\12\61\12\0"+
    "\1\61\2\0\2\61\1\0\2\61\2\0\6\61\6\0"+
    "\3\61\1\254\2\61\2\0\12\61\12\0\1\61\2\0"+
    "\2\61\1\0\2\61\2\0\6\61\6\0\2\61\1\255"+
    "\3\61\2\0\12\61\12\0\1\61\2\0\2\61\1\0"+
    "\2\61\2\0\6\61\6\0\5\61\1\256\2\0\12\61"+
    "\14\0\1\257\2\0\3\257\3\0\1\257\3\0\3\257"+
    "\10\0\2\257\3\0\1\257\1\0\4\257\15\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\4\101\1\260\1\101"+
    "\6\0\6\101\2\0\12\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\6\101\6\0\3\101\1\261\2\101"+
    "\2\0\12\101\12\0\1\101\2\0\1\101\1\262\1\0"+
    "\2\101\2\0\6\101\6\0\6\101\2\0\12\101\12\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\6\101\6\0"+
    "\6\101\2\0\3\101\1\263\1\101\1\264\4\101\12\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\1\101\1\265"+
    "\4\101\6\0\6\101\2\0\12\101\12\0\1\101\2\0"+
    "\2\101\1\0\2\101\2\0\4\101\1\266\1\101\6\0"+
    "\6\101\2\0\12\101\12\0\1\101\2\0\2\101\1\0"+
    "\2\101\2\0\6\101\6\0\6\101\2\0\1\101\1\267"+
    "\10\101\12\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\6\101\6\0\6\101\2\0\2\101\1\270\7\101\12\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\1\101\1\271"+
    "\4\101\6\0\6\101\2\0\12\101\14\0\1\272\2\0"+
    "\3\272\3\0\1\272\3\0\3\272\10\0\2\272\3\0"+
    "\1\272\1\0\4\272\17\0\1\273\2\0\3\273\3\0"+
    "\1\273\3\0\3\273\10\0\2\273\3\0\1\273\1\0"+
    "\4\273\17\0\1\274\2\0\3\274\3\0\1\274\3\0"+
    "\3\274\10\0\2\274\3\0\1\274\1\0\4\274\17\0"+
    "\1\275\2\0\3\275\3\0\1\275\3\0\3\275\10\0"+
    "\2\275\3\0\1\275\1\0\4\275\33\0\1\276\45\0"+
    "\1\277\2\0\3\277\3\0\1\277\3\0\3\277\10\0"+
    "\2\277\3\0\1\277\1\0\4\277\15\0\1\61\2\0"+
    "\2\61\1\0\2\61\2\0\2\61\1\300\3\61\6\0"+
    "\6\61\2\0\12\61\12\0\1\61\2\0\2\61\1\0"+
    "\2\61\2\0\6\61\6\0\3\61\1\301\2\61\2\0"+
    "\12\61\14\0\1\302\2\0\3\302\3\0\1\302\3\0"+
    "\3\302\10\0\2\302\3\0\1\302\1\0\4\302\15\0"+
    "\1\101\2\0\1\303\1\101\1\0\2\101\2\0\6\101"+
    "\6\0\6\101\2\0\12\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\2\101\1\304\3\101\6\0\6\101"+
    "\2\0\12\101\12\0\1\101\2\0\2\101\1\0\2\101"+
    "\2\0\6\101\6\0\6\101\2\0\2\101\1\305\7\101"+
    "\12\0\1\101\2\0\2\101\1\0\2\101\2\0\6\101"+
    "\6\0\6\101\2\0\4\101\1\306\5\101\12\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\6\101\6\0\6\101"+
    "\2\0\6\101\1\307\3\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\5\101\1\310\6\0\6\101\2\0"+
    "\12\101\12\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\6\101\6\0\1\311\5\101\2\0\12\101\12\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\6\101\6\0\6\101"+
    "\2\0\2\101\1\312\7\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\1\101\1\313\4\101\6\0\6\101"+
    "\2\0\12\101\12\0\1\101\2\0\2\101\1\0\2\101"+
    "\2\0\1\314\5\101\6\0\6\101\2\0\12\101\14\0"+
    "\1\315\2\0\3\315\3\0\1\315\3\0\3\315\10\0"+
    "\2\315\3\0\1\315\1\0\4\315\17\0\1\316\2\0"+
    "\3\316\3\0\1\316\3\0\3\316\10\0\2\316\3\0"+
    "\1\316\1\0\4\316\17\0\1\317\2\0\3\317\3\0"+
    "\1\317\3\0\3\317\10\0\2\317\3\0\1\317\1\0"+
    "\4\317\17\0\1\320\2\0\3\320\3\0\1\320\3\0"+
    "\3\320\10\0\2\320\3\0\1\320\1\0\4\320\34\0"+
    "\1\321\44\0\1\322\2\0\3\322\3\0\1\322\3\0"+
    "\3\322\10\0\2\322\3\0\1\322\1\0\4\322\15\0"+
    "\1\61\2\0\2\61\1\0\2\61\2\0\1\323\5\61"+
    "\6\0\6\61\2\0\12\61\12\0\1\61\2\0\2\61"+
    "\1\0\2\61\2\0\6\61\6\0\4\61\1\324\1\61"+
    "\2\0\12\61\14\0\1\325\2\0\3\325\3\0\1\325"+
    "\3\0\3\325\10\0\2\325\3\0\1\325\1\0\4\325"+
    "\15\0\1\101\2\0\2\101\1\0\2\101\2\0\6\101"+
    "\6\0\6\101\2\0\1\326\11\101\12\0\1\101\2\0"+
    "\2\101\1\0\2\101\2\0\6\101\6\0\1\101\1\327"+
    "\4\101\2\0\12\101\12\0\1\101\2\0\2\101\1\0"+
    "\2\101\2\0\6\101\6\0\1\101\1\330\4\101\2\0"+
    "\12\101\12\0\1\101\2\0\2\101\1\0\2\101\2\0"+
    "\6\101\6\0\5\101\1\331\2\0\12\101\12\0\1\101"+
    "\2\0\2\101\1\0\2\101\2\0\1\101\1\332\4\101"+
    "\6\0\6\101\2\0\12\101\12\0\1\101\2\0\2\101"+
    "\1\0\2\101\2\0\6\101\6\0\5\101\1\333\2\0"+
    "\12\101\14\0\1\334\2\0\3\334\3\0\1\334\3\0"+
    "\3\334\10\0\2\334\3\0\1\334\1\0\4\334\17\0"+
    "\1\335\2\0\3\335\3\0\1\335\3\0\3\335\10\0"+
    "\2\335\3\0\1\335\1\0\4\335\17\0\1\336\2\0"+
    "\3\336\3\0\1\336\3\0\3\336\10\0\2\336\3\0"+
    "\1\336\1\0\4\336\17\0\1\337\2\0\3\337\3\0"+
    "\1\337\3\0\3\337\10\0\2\337\3\0\1\337\1\0"+
    "\4\337\30\0\1\340\50\0\1\161\2\0\3\161\3\0"+
    "\1\161\3\0\3\161\10\0\2\161\3\0\1\161\1\0"+
    "\4\161\17\0\1\170\2\0\3\170\3\0\1\170\3\0"+
    "\3\170\10\0\2\170\3\0\1\170\1\0\4\170\15\0"+
    "\1\101\2\0\2\101\1\0\2\101\2\0\6\101\6\0"+
    "\6\101\2\0\2\101\1\341\7\101\12\0\1\101\2\0"+
    "\1\342\1\101\1\0\2\101\2\0\6\101\6\0\6\101"+
    "\2\0\12\101\14\0\1\205\2\0\3\205\3\0\1\205"+
    "\3\0\3\205\10\0\2\205\3\0\1\205\1\0\4\205"+
    "\17\0\1\210\2\0\3\210\3\0\1\210\3\0\3\210"+
    "\10\0\2\210\3\0\1\210\1\0\4\210\17\0\1\213"+
    "\2\0\3\213\3\0\1\213\3\0\3\213\10\0\2\213"+
    "\3\0\1\213\1\0\4\213\17\0\1\216\2\0\3\216"+
    "\3\0\1\216\3\0\3\216\10\0\2\216\3\0\1\216"+
    "\1\0\4\216\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\1\11\3\1\2\11\1\1\1\11\2\1\4\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\2\1\4\11"+
    "\1\1\1\11\2\1\3\11\5\1\1\11\4\1\5\11"+
    "\1\1\1\11\2\1\7\11\1\1\1\11\2\1\5\11"+
    "\1\1\1\11\2\1\3\11\1\1\1\11\2\1\3\0"+
    "\1\11\1\0\4\1\1\0\1\11\1\0\12\1\1\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\1\2\0\4\1\1\0\12\1\6\0\4\1"+
    "\1\0\12\1\6\0\2\1\1\0\12\1\6\0\2\1"+
    "\1\0\6\1\4\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _FsdLexer() {
      this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FsdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 79: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 3: 
            { yybegin(SERVICE_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 81: break;
          case 4: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 82: break;
          case 5: 
            { return MARKDOWNTEXT;
            } 
            // fall through
          case 83: break;
          case 6: 
            { return MARKDOWNHEADING;
            } 
            // fall through
          case 84: break;
          case 7: 
            { return ATTRIBUTENAME;
            } 
            // fall through
          case 85: break;
          case 8: 
            { yybegin(YYINITIAL); return RIGHT_BRACKET;
            } 
            // fall through
          case 86: break;
          case 9: 
            { yybegin(SERVICE_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 87: break;
          case 10: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 88: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 89: break;
          case 12: 
            { yybegin(SERVICE_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 90: break;
          case 13: 
            { yybegin(SERVICE_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 91: break;
          case 14: 
            { yybegin(SERVICE_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 92: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 93: break;
          case 16: 
            { return IDENTIFIER;
            } 
            // fall through
          case 94: break;
          case 17: 
            { yybegin(SERVICE_BODY_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 95: break;
          case 18: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 96: break;
          case 19: 
            { yybegin(MARKDOWN_SECTION); return RIGHT_BRACE;
            } 
            // fall through
          case 97: break;
          case 20: 
            { yybegin(SERVICE_BODY); return RIGHT_BRACKET;
            } 
            // fall through
          case 98: break;
          case 21: 
            { yybegin(SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 99: break;
          case 22: 
            { yybegin(SERVICE_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 100: break;
          case 23: 
            { yybegin(SERVICE_BODY_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 101: break;
          case 24: 
            { yybegin(SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 102: break;
          case 25: 
            { yybegin(METHOD_BODY_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 103: break;
          case 26: 
            { yybegin(METHOD_BODY_TYPE); return COLON;
            } 
            // fall through
          case 104: break;
          case 27: 
            { yybegin(RESPONSE_SEPARATOR); return RIGHT_BRACE;
            } 
            // fall through
          case 105: break;
          case 28: 
            { return TYPENAME;
            } 
            // fall through
          case 106: break;
          case 29: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 107: break;
          case 30: 
            { return LEFT_ANGLE;
            } 
            // fall through
          case 108: break;
          case 31: 
            { return RIGHT_ANGLE;
            } 
            // fall through
          case 109: break;
          case 32: 
            { yybegin(METHOD_BODY); return SEMI;
            } 
            // fall through
          case 110: break;
          case 33: 
            { yybegin(METHOD_BODY); return RIGHT_BRACKET;
            } 
            // fall through
          case 111: break;
          case 34: 
            { yybegin(METHOD_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 112: break;
          case 35: 
            { yybegin(METHOD_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 113: break;
          case 36: 
            { yybegin(METHOD_BODY_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 114: break;
          case 37: 
            { yybegin(METHOD_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 115: break;
          case 38: 
            { yybegin(RESPONSE_BODY); return COLON;
            } 
            // fall through
          case 116: break;
          case 39: 
            { yybegin(RESPONSE_BODY_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 117: break;
          case 40: 
            { yybegin(RESPONSE_BODY_TYPE); return COLON;
            } 
            // fall through
          case 118: break;
          case 41: 
            { yybegin(SERVICE_BODY); return RIGHT_BRACE;
            } 
            // fall through
          case 119: break;
          case 42: 
            { yybegin(RESPONSE_BODY); return SEMI;
            } 
            // fall through
          case 120: break;
          case 43: 
            { yybegin(RESPONSE_BODY); return RIGHT_BRACKET;
            } 
            // fall through
          case 121: break;
          case 44: 
            { yybegin(RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 122: break;
          case 45: 
            { yybegin(RESPONSE_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 123: break;
          case 46: 
            { yybegin(RESPONSE_BODY_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 124: break;
          case 47: 
            { yybegin(RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 125: break;
          case 48: 
            { yybegin(DATA_BODY_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 126: break;
          case 49: 
            { yybegin(DATA_BODY_TYPE); return COLON;
            } 
            // fall through
          case 127: break;
          case 50: 
            { yybegin(DATA_BODY); return SEMI;
            } 
            // fall through
          case 128: break;
          case 51: 
            { yybegin(DATA_BODY); return RIGHT_BRACKET;
            } 
            // fall through
          case 129: break;
          case 52: 
            { yybegin(DATA_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 130: break;
          case 53: 
            { yybegin(DATA_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 131: break;
          case 54: 
            { yybegin(DATA_BODY_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 132: break;
          case 55: 
            { yybegin(DATA_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 133: break;
          case 56: 
            { yybegin(LIST_BODY_ATTRIBUTE); return LEFT_BRACKET;
            } 
            // fall through
          case 134: break;
          case 57: 
            { yybegin(LIST_BODY); return RIGHT_BRACKET;
            } 
            // fall through
          case 135: break;
          case 58: 
            { yybegin(LIST_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            } 
            // fall through
          case 136: break;
          case 59: 
            { yybegin(LIST_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            } 
            // fall through
          case 137: break;
          case 60: 
            { yybegin(LIST_BODY_ATTRIBUTE); return RIGHT_PAREN;
            } 
            // fall through
          case 138: break;
          case 61: 
            { yybegin(LIST_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            } 
            // fall through
          case 139: break;
          case 62: 
            { return COMMENT;
            } 
            // fall through
          case 140: break;
          case 63: 
            { return MAP;
            } 
            // fall through
          case 141: break;
          case 64: 
            { yybegin(LIST_BODY); return ENUM;
            } 
            // fall through
          case 142: break;
          case 65: 
            { yybegin(DATA_BODY); return DATA;
            } 
            // fall through
          case 143: break;
          case 66: 
            { return ERROR;
            } 
            // fall through
          case 144: break;
          case 67: 
            { return INT32;
            } 
            // fall through
          case 145: break;
          case 68: 
            { return INT64;
            } 
            // fall through
          case 146: break;
          case 69: 
            { return BYTES;
            } 
            // fall through
          case 147: break;
          case 70: 
            { yybegin(LIST_BODY); return ERRORS;
            } 
            // fall through
          case 148: break;
          case 71: 
            { yybegin(METHOD_BODY); return METHOD;
            } 
            // fall through
          case 149: break;
          case 72: 
            { return STRING;
            } 
            // fall through
          case 150: break;
          case 73: 
            { return RESULT;
            } 
            // fall through
          case 151: break;
          case 74: 
            { return OBJECT;
            } 
            // fall through
          case 152: break;
          case 75: 
            { return DOUBLE;
            } 
            // fall through
          case 153: break;
          case 76: 
            { yybegin(SERVICE_BODY); return SERVICE;
            } 
            // fall through
          case 154: break;
          case 77: 
            { return DECIMAL;
            } 
            // fall through
          case 155: break;
          case 78: 
            { return BOOLEAN;
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
