// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _FsdLexer.flex

package io.github.facilityapi.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.facilityapi.intellij.psi.FsdTypes.*;


public class _FsdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MARKDOWN_SECTION = 2;
  public static final int SERVICE_ATTRIBUTE = 4;
  public static final int SERVICE_ATTRIBUTE_PARAMETER_LIST = 6;
  public static final int SERVICE_ATTRIBUTE_ARGUMENT = 8;
  public static final int SERVICE_BODY = 10;
  public static final int SERVICE_BODY_ATTRIBUTE = 12;
  public static final int SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST = 14;
  public static final int SERVICE_BODY_ATTRIBUTE_ARGUMENT = 16;
  public static final int METHOD_BODY = 18;
  public static final int METHOD_BODY_TYPE = 20;
  public static final int METHOD_BODY_TYPE_END = 22;
  public static final int METHOD_BODY_ATTRIBUTE = 24;
  public static final int METHOD_BODY_ATTRIBUTE_PARAMETER_LIST = 26;
  public static final int METHOD_BODY_ATTRIBUTE_ARGUMENT = 28;
  public static final int RESPONSE_SEPARATOR = 30;
  public static final int RESPONSE_BODY = 32;
  public static final int RESPONSE_BODY_TYPE = 34;
  public static final int RESPONSE_BODY_TYPE_END = 36;
  public static final int RESPONSE_BODY_ATTRIBUTE = 38;
  public static final int RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST = 40;
  public static final int RESPONSE_BODY_ATTRIBUTE_ARGUMENT = 42;
  public static final int DATA_BODY = 44;
  public static final int DATA_BODY_TYPE = 46;
  public static final int DATA_BODY_TYPE_END = 48;
  public static final int DATA_BODY_ATTRIBUTE = 50;
  public static final int DATA_BODY_ATTRIBUTE_PARAMETER_LIST = 52;
  public static final int DATA_BODY_ATTRIBUTE_ARGUMENT = 54;
  public static final int LIST_BODY = 56;
  public static final int LIST_BODY_ATTRIBUTE = 58;
  public static final int LIST_BODY_ATTRIBUTE_PARAMETER_LIST = 60;
  public static final int LIST_BODY_ATTRIBUTE_ARGUMENT = 62;
  public static final int EXTERN_DECL = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23,
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31,
    32, 32
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\4\0\1\7\1\10\1\0\1\11\1\12"+
    "\2\11\1\13\2\14\1\15\1\16\1\17\1\14\1\20"+
    "\3\14\1\21\1\22\1\23\1\0\1\24\2\0\32\14"+
    "\1\25\1\26\1\27\1\30\1\14\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\43\1\51"+
    "\1\52\1\53\1\54\1\55\1\43\1\56\1\57\1\43"+
    "\1\60\1\0\1\61\7\0\1\3\32\0\1\1\u01df\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\62";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\3\20\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\1\1\30\1\31"+
    "\1\32\1\33\13\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\1\1\47\1\50"+
    "\3\1\1\51\1\52\1\53\12\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\1\1\64\1\65\1\66"+
    "\12\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\1\1\77\1\100\1\101\1\102\1\103\1\104\1\1"+
    "\1\105\1\106\2\20\1\107\2\0\1\16\1\0\5\20"+
    "\1\0\1\30\1\0\15\34\1\0\1\47\5\0\14\54"+
    "\1\0\1\64\1\0\14\67\1\0\1\77\2\0\1\105"+
    "\1\0\2\20\2\0\5\20\1\0\10\34\1\110\4\34"+
    "\5\0\7\54\1\111\4\54\1\0\7\67\1\112\4\67"+
    "\2\0\2\20\2\0\1\113\1\114\3\20\1\0\15\34"+
    "\1\0\1\113\1\114\2\0\14\54\1\0\14\67\2\0"+
    "\1\115\1\116\2\0\3\20\1\0\1\34\1\117\3\34"+
    "\1\120\1\121\1\122\1\123\4\34\3\0\1\54\1\124"+
    "\3\54\1\125\1\126\1\127\4\54\1\0\1\67\1\130"+
    "\3\67\1\131\1\132\1\133\4\67\4\0\1\134\1\135"+
    "\1\136\1\0\3\34\1\137\1\34\1\140\1\141\1\142"+
    "\1\0\1\134\1\136\3\54\1\143\1\54\1\144\1\145"+
    "\1\146\1\0\3\67\1\147\1\67\1\150\1\151\1\152"+
    "\2\0\1\153\1\154\1\34\1\155\1\34\1\156\1\54"+
    "\1\157\1\54\1\160\1\67\1\161\1\67\1\162\1\163"+
    "\1\164\1\165\1\166\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u0693\0\u0693\0\u072c\0\u075f"+
    "\0\u0693\0\u0792\0\u0693\0\u0693\0\u0693\0\u07c5\0\u0693\0\u0693"+
    "\0\u07f8\0\u082b\0\u085e\0\u0693\0\u0891\0\u0693\0\u08c4\0\u08f7"+
    "\0\u092a\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693\0\u095d\0\u0990"+
    "\0\u09c3\0\u0693\0\u0693\0\u0693\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0693"+
    "\0\u0c27\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0693\0\u0cf3\0\u0d26\0\u0d59\0\u0693"+
    "\0\u0693\0\u0693\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0693\0\u0693\0\u0693"+
    "\0\u0693\0\u0693\0\u0fbd\0\u0ff0\0\u1023\0\u0693\0\u0693\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u0693\0\u0693\0\u0693\0\u0693\0\u0693\0\u1287"+
    "\0\u12ba\0\u12ed\0\u0693\0\u0693\0\u0693\0\u0693\0\u1320\0\u1353"+
    "\0\u1386\0\u0693\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u082b\0\u0693"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u0990\0\u0693"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u0c8d\0\u0693"+
    "\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e"+
    "\0\u1bb1\0\u0ff0\0\u0693\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u12ba\0\u0693\0\u1e7b\0\u1353\0\u0693\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac"+
    "\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u09f6\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u0d8c\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u1056\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u0891\0\u0891\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5"+
    "\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d"+
    "\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u0693\0\u0693\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37"+
    "\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c\0\u30cf"+
    "\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234\0\u3267"+
    "\0\u329a\0\u32cd\0\u3300\0\u3333\0\u0891\0\u0891\0\u3366\0\u3399"+
    "\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u09f6\0\u34cb\0\u34fe"+
    "\0\u3531\0\u09f6\0\u09f6\0\u09f6\0\u09f6\0\u3564\0\u3597\0\u35ca"+
    "\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9\0\u0d8c\0\u36fc\0\u372f"+
    "\0\u3762\0\u0d8c\0\u0d8c\0\u0d8c\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u1056\0\u38c7\0\u38fa\0\u392d\0\u1056\0\u1056"+
    "\0\u1056\0\u3960\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92"+
    "\0\u3ac5\0\u0891\0\u0891\0\u0891\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91"+
    "\0\u09f6\0\u3bc4\0\u09f6\0\u09f6\0\u09f6\0\u3bf7\0\u0693\0\u0693"+
    "\0\u3c2a\0\u3c5d\0\u3c90\0\u0d8c\0\u3cc3\0\u0d8c\0\u0d8c\0\u0d8c"+
    "\0\u3cf6\0\u3d29\0\u3d5c\0\u3d8f\0\u1056\0\u3dc2\0\u1056\0\u1056"+
    "\0\u1056\0\u3df5\0\u3e28\0\u0693\0\u09f6\0\u3e5b\0\u09f6\0\u3e8e"+
    "\0\u0d8c\0\u3ec1\0\u0d8c\0\u3ef4\0\u1056\0\u3f27\0\u1056\0\u3f5a"+
    "\0\u09f6\0\u09f6\0\u0d8c\0\u0d8c\0\u1056\0\u1056";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\3\43\7\42\1\44\11\42\1\45\1\42\1\46"+
    "\22\42\1\47\10\42\2\50\1\51\1\42\2\50\1\52"+
    "\53\50\2\42\3\43\3\42\1\53\1\54\1\42\1\55"+
    "\1\42\5\56\6\42\1\57\1\42\27\56\4\42\3\43"+
    "\4\42\1\60\1\42\1\55\1\42\5\61\10\42\27\61"+
    "\4\42\3\43\1\42\1\62\3\42\1\63\2\42\5\63"+
    "\1\64\7\42\27\63\4\42\3\43\7\42\1\44\5\65"+
    "\4\42\1\66\1\42\1\46\1\42\3\65\1\67\1\70"+
    "\7\65\1\71\12\65\1\72\1\73\2\42\3\43\3\42"+
    "\1\74\1\54\1\42\1\55\1\42\5\56\6\42\1\75"+
    "\1\42\27\56\4\42\3\43\4\42\1\76\1\42\1\55"+
    "\1\42\5\77\10\42\27\77\4\42\3\43\1\42\1\100"+
    "\3\42\1\101\2\42\5\101\1\64\7\42\27\101\4\42"+
    "\3\43\7\42\1\44\5\65\1\102\3\42\1\103\1\42"+
    "\1\46\1\42\27\65\1\72\1\104\2\42\3\43\7\42"+
    "\1\44\5\105\10\42\1\105\1\106\1\105\1\107\1\110"+
    "\1\111\2\105\1\112\3\105\1\113\1\114\1\115\1\105"+
    "\1\116\1\117\5\105\1\42\1\104\2\42\3\43\1\120"+
    "\6\42\1\44\5\121\1\42\1\122\1\123\1\124\1\125"+
    "\1\42\1\46\1\42\27\121\1\42\1\104\2\42\3\43"+
    "\3\42\1\126\1\54\1\42\1\55\1\42\5\56\6\42"+
    "\1\127\1\42\27\56\4\42\3\43\4\42\1\130\1\42"+
    "\1\55\1\42\5\131\10\42\27\131\4\42\3\43\1\42"+
    "\1\132\3\42\1\133\2\42\5\133\1\64\7\42\27\133"+
    "\4\42\3\43\7\42\1\44\5\42\1\134\12\42\1\135"+
    "\1\136\7\42\1\137\13\42\1\73\2\42\3\43\7\42"+
    "\1\44\5\65\1\140\3\42\1\141\1\42\1\46\1\42"+
    "\27\65\1\72\1\142\2\42\3\43\7\42\1\44\5\143"+
    "\10\42\1\143\1\144\1\143\1\145\1\146\3\143\1\147"+
    "\3\143\1\150\1\151\1\152\1\143\1\153\1\154\5\143"+
    "\1\42\1\142\2\42\3\43\1\120\6\42\1\44\5\155"+
    "\1\42\1\156\1\157\1\124\1\125\1\42\1\46\1\42"+
    "\27\155\1\42\1\142\2\42\3\43\3\42\1\160\1\54"+
    "\1\42\1\55\1\42\5\56\6\42\1\161\1\42\27\56"+
    "\4\42\3\43\4\42\1\162\1\42\1\55\1\42\5\163"+
    "\10\42\27\163\4\42\3\43\1\42\1\164\3\42\1\165"+
    "\2\42\5\165\1\64\7\42\27\165\4\42\3\43\7\42"+
    "\1\44\5\65\1\166\3\42\1\167\1\42\1\46\1\42"+
    "\27\65\1\72\1\142\2\42\3\43\7\42\1\44\5\170"+
    "\10\42\1\170\1\171\1\170\1\172\1\173\3\170\1\174"+
    "\3\170\1\175\1\176\1\177\1\170\1\200\1\201\5\170"+
    "\1\42\1\142\2\42\3\43\1\120\6\42\1\44\5\202"+
    "\1\42\1\203\1\204\1\124\1\125\1\42\1\46\1\42"+
    "\27\202\1\42\1\142\2\42\3\43\3\42\1\205\1\54"+
    "\1\42\1\55\1\42\5\56\6\42\1\206\1\42\27\56"+
    "\4\42\3\43\4\42\1\207\1\42\1\55\1\42\5\210"+
    "\10\42\27\210\4\42\3\43\1\42\1\211\3\42\1\212"+
    "\2\42\5\212\1\64\7\42\27\212\4\42\3\43\6\42"+
    "\1\55\1\44\5\65\4\42\1\213\1\42\1\46\1\42"+
    "\27\65\1\72\1\142\2\42\3\43\3\42\1\214\1\54"+
    "\1\42\1\55\1\42\5\56\6\42\1\215\1\42\27\56"+
    "\4\42\3\43\4\42\1\216\1\42\1\55\1\42\5\217"+
    "\10\42\27\217\4\42\3\43\1\42\1\220\3\42\1\221"+
    "\2\42\5\221\1\64\7\42\27\221\4\42\3\43\7\42"+
    "\1\44\5\65\1\42\1\222\6\42\3\65\1\223\1\224"+
    "\22\65\3\42\64\0\3\43\72\0\1\225\104\0\1\226"+
    "\25\0\2\50\2\0\56\50\1\0\2\52\1\0\60\52"+
    "\14\0\5\56\10\0\27\56\17\0\5\61\10\0\27\61"+
    "\3\0\5\227\1\230\20\227\1\231\34\227\11\0\1\63"+
    "\2\0\5\63\10\0\27\63\17\0\5\65\10\0\27\65"+
    "\17\0\5\65\10\0\1\232\26\65\17\0\5\65\10\0"+
    "\15\65\1\233\2\65\1\234\4\65\1\235\1\65\17\0"+
    "\5\65\10\0\4\65\1\236\22\65\17\0\5\77\10\0"+
    "\27\77\3\0\5\237\1\240\20\237\1\241\34\237\11\0"+
    "\1\101\2\0\5\101\10\0\27\101\17\0\5\105\10\0"+
    "\27\105\17\0\5\105\10\0\16\105\1\242\7\105\1\243"+
    "\17\0\5\105\10\0\1\244\3\105\1\245\11\105\1\246"+
    "\10\105\17\0\5\105\10\0\20\105\1\247\6\105\17\0"+
    "\5\105\10\0\13\105\1\250\13\105\17\0\5\105\10\0"+
    "\15\105\1\251\11\105\17\0\5\105\10\0\1\252\26\105"+
    "\17\0\5\105\10\0\23\105\1\253\3\105\17\0\5\105"+
    "\10\0\1\105\1\254\25\105\17\0\5\105\10\0\4\105"+
    "\1\255\22\105\17\0\5\105\10\0\22\105\1\256\4\105"+
    "\17\0\5\121\10\0\27\121\17\0\5\131\10\0\27\131"+
    "\3\0\5\257\1\260\20\257\1\261\34\257\11\0\1\133"+
    "\2\0\5\133\10\0\27\133\34\0\1\262\77\0\1\263"+
    "\2\0\1\264\46\0\1\265\41\0\5\143\10\0\27\143"+
    "\17\0\5\143\10\0\16\143\1\266\7\143\1\267\17\0"+
    "\5\143\10\0\1\270\3\143\1\271\11\143\1\272\10\143"+
    "\17\0\5\143\10\0\20\143\1\273\6\143\17\0\5\143"+
    "\10\0\15\143\1\274\11\143\17\0\5\143\10\0\1\275"+
    "\26\143\17\0\5\143\10\0\23\143\1\276\3\143\17\0"+
    "\5\143\10\0\1\143\1\277\25\143\17\0\5\143\10\0"+
    "\4\143\1\300\22\143\17\0\5\143\10\0\22\143\1\301"+
    "\4\143\17\0\5\155\10\0\27\155\17\0\5\163\10\0"+
    "\27\163\3\0\5\302\1\303\20\302\1\304\34\302\11\0"+
    "\1\165\2\0\5\165\10\0\27\165\17\0\5\170\10\0"+
    "\27\170\17\0\5\170\10\0\16\170\1\305\7\170\1\306"+
    "\17\0\5\170\10\0\1\307\3\170\1\310\11\170\1\311"+
    "\10\170\17\0\5\170\10\0\20\170\1\312\6\170\17\0"+
    "\5\170\10\0\15\170\1\313\11\170\17\0\5\170\10\0"+
    "\1\314\26\170\17\0\5\170\10\0\23\170\1\315\3\170"+
    "\17\0\5\170\10\0\1\170\1\316\25\170\17\0\5\170"+
    "\10\0\4\170\1\317\22\170\17\0\5\170\10\0\22\170"+
    "\1\320\4\170\17\0\5\202\10\0\27\202\17\0\5\210"+
    "\10\0\27\210\3\0\5\321\1\322\20\321\1\323\34\321"+
    "\11\0\1\212\2\0\5\212\10\0\27\212\17\0\5\217"+
    "\10\0\27\217\3\0\5\324\1\325\20\324\1\326\34\324"+
    "\11\0\1\221\2\0\5\221\10\0\27\221\17\0\5\65"+
    "\10\0\1\327\26\65\17\0\5\65\10\0\15\65\1\330"+
    "\11\65\3\0\2\225\1\0\60\225\51\0\1\331\16\0"+
    "\1\227\5\0\1\227\12\0\1\227\3\0\1\227\3\0"+
    "\1\227\7\0\1\227\2\0\1\227\1\0\1\227\1\332"+
    "\22\0\5\65\10\0\22\65\1\333\4\65\17\0\5\65"+
    "\10\0\23\65\1\334\3\65\17\0\5\65\10\0\20\65"+
    "\1\335\6\65\17\0\5\65\10\0\22\65\1\336\4\65"+
    "\17\0\5\65\10\0\22\65\1\337\4\65\10\0\1\237"+
    "\5\0\1\237\12\0\1\237\3\0\1\237\3\0\1\237"+
    "\7\0\1\237\2\0\1\237\1\0\1\237\1\340\22\0"+
    "\5\105\10\0\16\105\1\341\10\105\17\0\5\105\10\0"+
    "\22\105\1\342\4\105\17\0\5\105\10\0\22\105\1\343"+
    "\4\105\17\0\5\105\10\0\2\105\1\344\24\105\17\0"+
    "\5\105\10\0\23\105\1\345\3\105\17\0\5\105\10\0"+
    "\20\105\1\346\6\105\17\0\5\105\10\0\16\105\1\347"+
    "\10\105\17\0\5\105\10\0\22\105\1\350\4\105\17\0"+
    "\5\105\10\0\17\105\1\351\7\105\17\0\5\105\10\0"+
    "\13\105\1\352\13\105\17\0\5\105\10\0\11\105\1\353"+
    "\15\105\17\0\5\105\10\0\21\105\1\354\5\105\17\0"+
    "\5\105\10\0\20\105\1\355\6\105\10\0\1\257\5\0"+
    "\1\257\12\0\1\257\3\0\1\257\3\0\1\257\7\0"+
    "\1\257\2\0\1\257\1\0\1\257\1\356\61\0\1\357"+
    "\63\0\1\360\57\0\1\361\64\0\1\362\23\0\5\143"+
    "\10\0\16\143\1\363\10\143\17\0\5\143\10\0\22\143"+
    "\1\364\4\143\17\0\5\143\10\0\22\143\1\365\4\143"+
    "\17\0\5\143\10\0\2\143\1\366\24\143\17\0\5\143"+
    "\10\0\23\143\1\367\3\143\17\0\5\143\10\0\20\143"+
    "\1\370\6\143\17\0\5\143\10\0\22\143\1\371\4\143"+
    "\17\0\5\143\10\0\17\143\1\372\7\143\17\0\5\143"+
    "\10\0\13\143\1\373\13\143\17\0\5\143\10\0\11\143"+
    "\1\374\15\143\17\0\5\143\10\0\21\143\1\375\5\143"+
    "\17\0\5\143\10\0\20\143\1\376\6\143\10\0\1\302"+
    "\5\0\1\302\12\0\1\302\3\0\1\302\3\0\1\302"+
    "\7\0\1\302\2\0\1\302\1\0\1\302\1\377\22\0"+
    "\5\170\10\0\16\170\1\u0100\10\170\17\0\5\170\10\0"+
    "\22\170\1\u0101\4\170\17\0\5\170\10\0\22\170\1\u0102"+
    "\4\170\17\0\5\170\10\0\2\170\1\u0103\24\170\17\0"+
    "\5\170\10\0\23\170\1\u0104\3\170\17\0\5\170\10\0"+
    "\20\170\1\u0105\6\170\17\0\5\170\10\0\22\170\1\u0106"+
    "\4\170\17\0\5\170\10\0\17\170\1\u0107\7\170\17\0"+
    "\5\170\10\0\13\170\1\u0108\13\170\17\0\5\170\10\0"+
    "\11\170\1\u0109\15\170\17\0\5\170\10\0\21\170\1\u010a"+
    "\5\170\17\0\5\170\10\0\20\170\1\u010b\6\170\10\0"+
    "\1\321\5\0\1\321\12\0\1\321\3\0\1\321\3\0"+
    "\1\321\7\0\1\321\2\0\1\321\1\0\1\321\1\u010c"+
    "\13\0\1\324\5\0\1\324\12\0\1\324\3\0\1\324"+
    "\3\0\1\324\7\0\1\324\2\0\1\324\1\0\1\324"+
    "\1\u010d\22\0\5\65\10\0\22\65\1\u010e\4\65\17\0"+
    "\5\65\10\0\23\65\1\u010f\3\65\60\0\1\u0110\21\0"+
    "\5\u0111\4\0\12\u0111\40\0\5\65\10\0\1\u0112\26\65"+
    "\17\0\5\65\10\0\14\65\1\u0113\12\65\17\0\5\65"+
    "\10\0\16\65\1\u0114\10\65\17\0\5\65\10\0\4\65"+
    "\1\u0115\22\65\17\0\5\65\10\0\7\65\1\u0116\17\65"+
    "\17\0\5\u0117\4\0\12\u0117\40\0\5\105\10\0\13\105"+
    "\1\u0118\13\105\17\0\5\105\10\0\4\105\1\u0119\22\105"+
    "\17\0\5\105\10\0\4\105\1\u011a\22\105\17\0\5\105"+
    "\10\0\10\105\1\u011b\16\105\17\0\5\105\10\0\1\105"+
    "\1\u011c\25\105\17\0\5\105\10\0\16\105\1\u011d\10\105"+
    "\17\0\5\105\10\0\1\u011e\26\105\17\0\2\105\1\u011f"+
    "\1\105\1\u0120\10\0\27\105\17\0\5\105\10\0\13\105"+
    "\1\u0121\13\105\17\0\5\105\10\0\4\105\1\u0122\22\105"+
    "\17\0\5\105\10\0\23\105\1\u0123\3\105\17\0\5\105"+
    "\10\0\10\105\1\u0124\16\105\17\0\5\u0125\4\0\12\u0125"+
    "\55\0\1\u0126\76\0\1\u0127\64\0\1\u0128\53\0\1\u0129"+
    "\36\0\5\143\10\0\13\143\1\u012a\13\143\17\0\5\143"+
    "\10\0\4\143\1\u012b\22\143\17\0\5\143\10\0\4\143"+
    "\1\u012c\22\143\17\0\5\143\10\0\10\143\1\u012d\16\143"+
    "\17\0\5\143\10\0\1\143\1\u012e\25\143\17\0\5\143"+
    "\10\0\16\143\1\u012f\10\143\17\0\2\143\1\u0130\1\143"+
    "\1\u0131\10\0\27\143\17\0\5\143\10\0\13\143\1\u0132"+
    "\13\143\17\0\5\143\10\0\4\143\1\u0133\22\143\17\0"+
    "\5\143\10\0\23\143\1\u0134\3\143\17\0\5\143\10\0"+
    "\10\143\1\u0135\16\143\17\0\5\u0136\4\0\12\u0136\40\0"+
    "\5\170\10\0\13\170\1\u0137\13\170\17\0\5\170\10\0"+
    "\4\170\1\u0138\22\170\17\0\5\170\10\0\4\170\1\u0139"+
    "\22\170\17\0\5\170\10\0\10\170\1\u013a\16\170\17\0"+
    "\5\170\10\0\1\170\1\u013b\25\170\17\0\5\170\10\0"+
    "\16\170\1\u013c\10\170\17\0\2\170\1\u013d\1\170\1\u013e"+
    "\10\0\27\170\17\0\5\170\10\0\13\170\1\u013f\13\170"+
    "\17\0\5\170\10\0\4\170\1\u0140\22\170\17\0\5\170"+
    "\10\0\23\170\1\u0141\3\170\17\0\5\170\10\0\10\170"+
    "\1\u0142\16\170\17\0\5\u0143\4\0\12\u0143\40\0\5\u0144"+
    "\4\0\12\u0144\40\0\5\65\10\0\1\u0145\26\65\17\0"+
    "\5\65\10\0\14\65\1\u0146\12\65\44\0\1\u0147\35\0"+
    "\5\u0148\4\0\12\u0148\40\0\5\65\10\0\20\65\1\u0149"+
    "\6\65\17\0\5\65\10\0\20\65\1\u014a\6\65\17\0"+
    "\5\65\10\0\16\65\1\u014b\10\65\17\0\5\u014c\4\0"+
    "\12\u014c\40\0\5\105\10\0\4\105\1\u014d\22\105\17\0"+
    "\5\105\10\0\21\105\1\u014e\5\105\17\0\5\105\10\0"+
    "\22\105\1\u014f\4\105\17\0\5\105\10\0\14\105\1\u0150"+
    "\12\105\17\0\5\105\10\0\13\105\1\u0151\13\105\17\0"+
    "\5\105\10\0\20\105\1\u0152\6\105\17\0\5\105\10\0"+
    "\22\105\1\u0153\4\105\17\0\1\105\1\u0154\3\105\10\0"+
    "\27\105\17\0\3\105\1\u0155\1\105\10\0\27\105\17\0"+
    "\5\105\10\0\1\u0156\26\105\17\0\5\105\10\0\2\105"+
    "\1\u0157\24\105\17\0\5\105\10\0\13\105\1\u0158\13\105"+
    "\17\0\5\105\10\0\15\105\1\u0159\11\105\17\0\5\u015a"+
    "\4\0\12\u015a\75\0\1\u015b\60\0\1\u015c\27\0\5\143"+
    "\10\0\4\143\1\u015d\22\143\17\0\5\143\10\0\21\143"+
    "\1\u015e\5\143\17\0\5\143\10\0\22\143\1\u015f\4\143"+
    "\17\0\5\143\10\0\14\143\1\u0160\12\143\17\0\5\143"+
    "\10\0\13\143\1\u0161\13\143\17\0\5\143\10\0\20\143"+
    "\1\u0162\6\143\17\0\1\143\1\u0163\3\143\10\0\27\143"+
    "\17\0\3\143\1\u0164\1\143\10\0\27\143\17\0\5\143"+
    "\10\0\1\u0165\26\143\17\0\5\143\10\0\2\143\1\u0166"+
    "\24\143\17\0\5\143\10\0\13\143\1\u0167\13\143\17\0"+
    "\5\143\10\0\15\143\1\u0168\11\143\17\0\5\u0169\4\0"+
    "\12\u0169\40\0\5\170\10\0\4\170\1\u016a\22\170\17\0"+
    "\5\170\10\0\21\170\1\u016b\5\170\17\0\5\170\10\0"+
    "\22\170\1\u016c\4\170\17\0\5\170\10\0\14\170\1\u016d"+
    "\12\170\17\0\5\170\10\0\13\170\1\u016e\13\170\17\0"+
    "\5\170\10\0\20\170\1\u016f\6\170\17\0\1\170\1\u0170"+
    "\3\170\10\0\27\170\17\0\3\170\1\u0171\1\170\10\0"+
    "\27\170\17\0\5\170\10\0\1\u0172\26\170\17\0\5\170"+
    "\10\0\2\170\1\u0173\24\170\17\0\5\170\10\0\13\170"+
    "\1\u0174\13\170\17\0\5\170\10\0\15\170\1\u0175\11\170"+
    "\17\0\5\u0176\4\0\12\u0176\40\0\5\u0177\4\0\12\u0177"+
    "\57\0\1\u0178\43\0\5\u0179\4\0\12\u0179\40\0\5\65"+
    "\10\0\21\65\1\u017a\5\65\17\0\5\65\10\0\15\65"+
    "\1\u017b\11\65\17\0\5\65\10\0\3\65\1\u017c\23\65"+
    "\17\0\5\u017d\4\0\12\u017d\40\0\5\105\10\0\1\u017e"+
    "\26\105\17\0\5\105\10\0\10\105\1\u017f\16\105\17\0"+
    "\5\105\10\0\1\u0180\26\105\17\0\5\105\10\0\4\105"+
    "\1\u0181\22\105\17\0\5\105\10\0\1\105\1\u0182\25\105"+
    "\17\0\5\105\10\0\22\105\1\u0183\4\105\17\0\5\105"+
    "\10\0\22\105\1\u0184\4\105\17\0\5\105\10\0\6\105"+
    "\1\u0185\20\105\17\0\5\u0186\4\0\12\u0186\76\0\1\u0187"+
    "\44\0\1\u0188\42\0\5\143\10\0\1\u0189\26\143\17\0"+
    "\5\143\10\0\10\143\1\u018a\16\143\17\0\5\143\10\0"+
    "\1\u018b\26\143\17\0\5\143\10\0\4\143\1\u018c\22\143"+
    "\17\0\5\143\10\0\1\143\1\u018d\25\143\17\0\5\143"+
    "\10\0\22\143\1\u018e\4\143\17\0\5\143\10\0\22\143"+
    "\1\u018f\4\143\17\0\5\143\10\0\6\143\1\u0190\20\143"+
    "\17\0\5\u0191\4\0\12\u0191\40\0\5\170\10\0\1\u0192"+
    "\26\170\17\0\5\170\10\0\10\170\1\u0193\16\170\17\0"+
    "\5\170\10\0\1\u0194\26\170\17\0\5\170\10\0\4\170"+
    "\1\u0195\22\170\17\0\5\170\10\0\1\170\1\u0196\25\170"+
    "\17\0\5\170\10\0\22\170\1\u0197\4\170\17\0\5\170"+
    "\10\0\22\170\1\u0198\4\170\17\0\5\170\10\0\6\170"+
    "\1\u0199\20\170\17\0\5\u019a\4\0\12\u019a\40\0\5\u019b"+
    "\4\0\12\u019b\61\0\1\u019c\41\0\5\227\4\0\12\227"+
    "\40\0\5\237\4\0\12\237\40\0\5\105\10\0\15\105"+
    "\1\u019d\11\105\17\0\5\105\10\0\14\105\1\u019e\12\105"+
    "\17\0\5\105\10\0\13\105\1\u019f\13\105\17\0\5\105"+
    "\10\0\13\105\1\u01a0\13\105\17\0\5\257\4\0\12\257"+
    "\40\0\5\143\10\0\15\143\1\u01a1\11\143\17\0\5\143"+
    "\10\0\14\143\1\u01a2\12\143\17\0\5\143\10\0\13\143"+
    "\1\u01a3\13\143\17\0\5\143\10\0\13\143\1\u01a4\13\143"+
    "\17\0\5\302\4\0\12\302\40\0\5\170\10\0\15\170"+
    "\1\u01a5\11\170\17\0\5\170\10\0\14\170\1\u01a6\12\170"+
    "\17\0\5\170\10\0\13\170\1\u01a7\13\170\17\0\5\170"+
    "\10\0\13\170\1\u01a8\13\170\17\0\5\321\4\0\12\321"+
    "\40\0\5\324\4\0\12\324\40\0\5\105\10\0\4\105"+
    "\1\u01a9\22\105\17\0\5\105\10\0\4\105\1\u01aa\22\105"+
    "\17\0\5\143\10\0\4\143\1\u01ab\22\143\17\0\5\143"+
    "\10\0\4\143\1\u01ac\22\143\17\0\5\170\10\0\4\170"+
    "\1\u01ad\22\170\17\0\5\170\10\0\4\170\1\u01ae\22\170"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16269];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\1\11\2\1\2\11\2\1\1\11\1\1\3\11"+
    "\1\1\2\11\3\1\1\11\1\1\1\11\3\1\5\11"+
    "\3\1\3\11\13\1\1\11\1\1\7\11\3\1\1\11"+
    "\3\1\3\11\13\1\5\11\3\1\2\11\13\1\5\11"+
    "\3\1\4\11\3\1\1\11\3\1\2\0\1\11\1\0"+
    "\5\1\1\0\1\11\1\0\15\1\1\0\1\11\5\0"+
    "\14\1\1\0\1\11\1\0\14\1\1\0\1\11\2\0"+
    "\1\11\1\0\2\1\2\0\5\1\1\0\15\1\5\0"+
    "\14\1\1\0\14\1\2\0\2\1\2\0\5\1\1\0"+
    "\15\1\1\0\2\11\2\0\14\1\1\0\14\1\2\0"+
    "\2\1\2\0\3\1\1\0\15\1\3\0\14\1\1\0"+
    "\14\1\4\0\3\1\1\0\10\1\1\0\2\11\10\1"+
    "\1\0\10\1\2\0\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _FsdLexer() {
      this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FsdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 120: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 121: break;
          case 3:
            { yybegin(SERVICE_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 122: break;
          case 4:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 123: break;
          case 5:
            { return MARKDOWNTEXT;
            }
          // fall through
          case 124: break;
          case 6:
            { return MARKDOWNHEADING;
            }
          // fall through
          case 125: break;
          case 7:
            { yybegin(SERVICE_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 126: break;
          case 8:
            { return RIGHT_PAREN;
            }
          // fall through
          case 127: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 128: break;
          case 10:
            { return ATTRIBUTENAME;
            }
          // fall through
          case 129: break;
          case 11:
            { yybegin(YYINITIAL); return RIGHT_BRACKET;
            }
          // fall through
          case 130: break;
          case 12:
            { yybegin(SERVICE_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 131: break;
          case 13:
            { yybegin(SERVICE_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 132: break;
          case 14:
            { yybegin(SERVICE_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 133: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 134: break;
          case 16:
            { return IDENTIFIER;
            }
          // fall through
          case 135: break;
          case 17:
            { yybegin(SERVICE_BODY_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 136: break;
          case 18:
            { return LEFT_BRACE;
            }
          // fall through
          case 137: break;
          case 19:
            { yybegin(MARKDOWN_SECTION); return RIGHT_BRACE;
            }
          // fall through
          case 138: break;
          case 20:
            { yybegin(SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 139: break;
          case 21:
            { yybegin(SERVICE_BODY); return RIGHT_BRACKET;
            }
          // fall through
          case 140: break;
          case 22:
            { yybegin(SERVICE_BODY_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 141: break;
          case 23:
            { yybegin(SERVICE_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 142: break;
          case 24:
            { yybegin(SERVICE_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 143: break;
          case 25:
            { yybegin(METHOD_BODY_TYPE); return COLON;
            }
          // fall through
          case 144: break;
          case 26:
            { yybegin(METHOD_BODY_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 145: break;
          case 27:
            { yybegin(RESPONSE_SEPARATOR); return RIGHT_BRACE;
            }
          // fall through
          case 146: break;
          case 28:
            { yybegin(METHOD_BODY_TYPE_END); return TYPENAME;
            }
          // fall through
          case 147: break;
          case 29:
            { return BANG;
            }
          // fall through
          case 148: break;
          case 30:
            { yybegin(METHOD_BODY); return IDENTIFIER;
            }
          // fall through
          case 149: break;
          case 31:
            { yybegin(METHOD_BODY); return SEMI;
            }
          // fall through
          case 150: break;
          case 32:
            { yybegin(METHOD_BODY_TYPE); return LEFT_ANGLE;
            }
          // fall through
          case 151: break;
          case 33:
            { return RIGHT_ANGLE;
            }
          // fall through
          case 152: break;
          case 34:
            { return LEFT_BRACKET;
            }
          // fall through
          case 153: break;
          case 35:
            { yybegin(METHOD_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 154: break;
          case 36:
            { yybegin(METHOD_BODY); return RIGHT_BRACKET;
            }
          // fall through
          case 155: break;
          case 37:
            { yybegin(METHOD_BODY_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 156: break;
          case 38:
            { yybegin(METHOD_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 157: break;
          case 39:
            { yybegin(METHOD_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 158: break;
          case 40:
            { yybegin(RESPONSE_BODY); return COLON;
            }
          // fall through
          case 159: break;
          case 41:
            { yybegin(RESPONSE_BODY_TYPE); return COLON;
            }
          // fall through
          case 160: break;
          case 42:
            { yybegin(RESPONSE_BODY_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 161: break;
          case 43:
            { yybegin(SERVICE_BODY); return RIGHT_BRACE;
            }
          // fall through
          case 162: break;
          case 44:
            { yybegin(RESPONSE_BODY_TYPE_END); return TYPENAME;
            }
          // fall through
          case 163: break;
          case 45:
            { yybegin(RESPONSE_BODY); return IDENTIFIER;
            }
          // fall through
          case 164: break;
          case 46:
            { yybegin(RESPONSE_BODY); return SEMI;
            }
          // fall through
          case 165: break;
          case 47:
            { yybegin(RESPONSE_BODY_TYPE); return LEFT_ANGLE;
            }
          // fall through
          case 166: break;
          case 48:
            { yybegin(RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 167: break;
          case 49:
            { yybegin(RESPONSE_BODY); return RIGHT_BRACKET;
            }
          // fall through
          case 168: break;
          case 50:
            { yybegin(RESPONSE_BODY_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 169: break;
          case 51:
            { yybegin(RESPONSE_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 170: break;
          case 52:
            { yybegin(RESPONSE_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 171: break;
          case 53:
            { yybegin(DATA_BODY_TYPE); return COLON;
            }
          // fall through
          case 172: break;
          case 54:
            { yybegin(DATA_BODY_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 173: break;
          case 55:
            { yybegin(DATA_BODY_TYPE_END); return TYPENAME;
            }
          // fall through
          case 174: break;
          case 56:
            { yybegin(DATA_BODY); return IDENTIFIER;
            }
          // fall through
          case 175: break;
          case 57:
            { yybegin(DATA_BODY); return SEMI;
            }
          // fall through
          case 176: break;
          case 58:
            { yybegin(DATA_BODY_TYPE); return LEFT_ANGLE;
            }
          // fall through
          case 177: break;
          case 59:
            { yybegin(DATA_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 178: break;
          case 60:
            { yybegin(DATA_BODY); return RIGHT_BRACKET;
            }
          // fall through
          case 179: break;
          case 61:
            { yybegin(DATA_BODY_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 180: break;
          case 62:
            { yybegin(DATA_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 181: break;
          case 63:
            { yybegin(DATA_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 182: break;
          case 64:
            { yybegin(LIST_BODY_ATTRIBUTE); return LEFT_BRACKET;
            }
          // fall through
          case 183: break;
          case 65:
            { yybegin(LIST_BODY_ATTRIBUTE_PARAMETER_LIST); return LEFT_PAREN;
            }
          // fall through
          case 184: break;
          case 66:
            { yybegin(LIST_BODY); return RIGHT_BRACKET;
            }
          // fall through
          case 185: break;
          case 67:
            { yybegin(LIST_BODY_ATTRIBUTE); return RIGHT_PAREN;
            }
          // fall through
          case 186: break;
          case 68:
            { yybegin(LIST_BODY_ATTRIBUTE_ARGUMENT); return IDENTIFIER;
            }
          // fall through
          case 187: break;
          case 69:
            { yybegin(LIST_BODY_ATTRIBUTE_PARAMETER_LIST); return ATTRIBUTEPARAMETERVALUE;
            }
          // fall through
          case 188: break;
          case 70:
            { yybegin(SERVICE_BODY); return SEMI;
            }
          // fall through
          case 189: break;
          case 71:
            { return COMMENT;
            }
          // fall through
          case 190: break;
          case 72:
            { yybegin(METHOD_BODY_TYPE_END); return MAP;
            }
          // fall through
          case 191: break;
          case 73:
            { yybegin(RESPONSE_BODY_TYPE_END); return MAP;
            }
          // fall through
          case 192: break;
          case 74:
            { yybegin(DATA_BODY_TYPE_END); return MAP;
            }
          // fall through
          case 193: break;
          case 75:
            { yybegin(DATA_BODY); return DATA;
            }
          // fall through
          case 194: break;
          case 76:
            { yybegin(LIST_BODY); return ENUM;
            }
          // fall through
          case 195: break;
          case 77:
            { return DATA;
            }
          // fall through
          case 196: break;
          case 78:
            { return ENUM;
            }
          // fall through
          case 197: break;
          case 79:
            { yybegin(METHOD_BODY_TYPE_END); return BYTES;
            }
          // fall through
          case 198: break;
          case 80:
            { yybegin(METHOD_BODY_TYPE_END); return ERROR;
            }
          // fall through
          case 199: break;
          case 81:
            { yybegin(METHOD_BODY_TYPE_END); return FLOAT;
            }
          // fall through
          case 200: break;
          case 82:
            { yybegin(METHOD_BODY_TYPE_END); return INT32;
            }
          // fall through
          case 201: break;
          case 83:
            { yybegin(METHOD_BODY_TYPE_END); return INT64;
            }
          // fall through
          case 202: break;
          case 84:
            { yybegin(RESPONSE_BODY_TYPE_END); return BYTES;
            }
          // fall through
          case 203: break;
          case 85:
            { yybegin(RESPONSE_BODY_TYPE_END); return ERROR;
            }
          // fall through
          case 204: break;
          case 86:
            { yybegin(RESPONSE_BODY_TYPE_END); return INT32;
            }
          // fall through
          case 205: break;
          case 87:
            { yybegin(RESPONSE_BODY_TYPE_END); return INT64;
            }
          // fall through
          case 206: break;
          case 88:
            { yybegin(DATA_BODY_TYPE_END); return BYTES;
            }
          // fall through
          case 207: break;
          case 89:
            { yybegin(DATA_BODY_TYPE_END); return ERROR;
            }
          // fall through
          case 208: break;
          case 90:
            { yybegin(DATA_BODY_TYPE_END); return INT32;
            }
          // fall through
          case 209: break;
          case 91:
            { yybegin(DATA_BODY_TYPE_END); return INT64;
            }
          // fall through
          case 210: break;
          case 92:
            { yybegin(LIST_BODY); return ERRORS;
            }
          // fall through
          case 211: break;
          case 93:
            { yybegin(EXTERN_DECL); return EXTERN;
            }
          // fall through
          case 212: break;
          case 94:
            { yybegin(METHOD_BODY); return METHOD;
            }
          // fall through
          case 213: break;
          case 95:
            { yybegin(METHOD_BODY_TYPE_END); return DOUBLE;
            }
          // fall through
          case 214: break;
          case 96:
            { yybegin(METHOD_BODY_TYPE_END); return OBJECT;
            }
          // fall through
          case 215: break;
          case 97:
            { yybegin(METHOD_BODY_TYPE_END); return RESULT;
            }
          // fall through
          case 216: break;
          case 98:
            { yybegin(METHOD_BODY_TYPE_END); return STRING;
            }
          // fall through
          case 217: break;
          case 99:
            { yybegin(RESPONSE_BODY_TYPE_END); return DOUBLE;
            }
          // fall through
          case 218: break;
          case 100:
            { yybegin(RESPONSE_BODY_TYPE_END); return OBJECT;
            }
          // fall through
          case 219: break;
          case 101:
            { yybegin(RESPONSE_BODY_TYPE_END); return RESULT;
            }
          // fall through
          case 220: break;
          case 102:
            { yybegin(RESPONSE_BODY_TYPE_END); return STRING;
            }
          // fall through
          case 221: break;
          case 103:
            { yybegin(DATA_BODY_TYPE_END); return DOUBLE;
            }
          // fall through
          case 222: break;
          case 104:
            { yybegin(DATA_BODY_TYPE_END); return OBJECT;
            }
          // fall through
          case 223: break;
          case 105:
            { yybegin(DATA_BODY_TYPE_END); return RESULT;
            }
          // fall through
          case 224: break;
          case 106:
            { yybegin(DATA_BODY_TYPE_END); return STRING;
            }
          // fall through
          case 225: break;
          case 107:
            { yybegin(SERVICE_BODY); return SERVICE;
            }
          // fall through
          case 226: break;
          case 108:
            { yybegin(METHOD_BODY_TYPE_END); return BOOLEAN;
            }
          // fall through
          case 227: break;
          case 109:
            { yybegin(METHOD_BODY_TYPE_END); return DECIMAL;
            }
          // fall through
          case 228: break;
          case 110:
            { yybegin(RESPONSE_BODY_TYPE_END); return BOOLEAN;
            }
          // fall through
          case 229: break;
          case 111:
            { yybegin(RESPONSE_BODY_TYPE_END); return DECIMAL;
            }
          // fall through
          case 230: break;
          case 112:
            { yybegin(DATA_BODY_TYPE_END); return BOOLEAN;
            }
          // fall through
          case 231: break;
          case 113:
            { yybegin(DATA_BODY_TYPE_END); return DECIMAL;
            }
          // fall through
          case 232: break;
          case 114:
            { yybegin(METHOD_BODY_TYPE_END); return DATETIME;
            }
          // fall through
          case 233: break;
          case 115:
            { yybegin(METHOD_BODY_TYPE_END); return NULLABLE;
            }
          // fall through
          case 234: break;
          case 116:
            { yybegin(RESPONSE_BODY_TYPE_END); return DATETIME;
            }
          // fall through
          case 235: break;
          case 117:
            { yybegin(RESPONSE_BODY_TYPE_END); return NULLABLE;
            }
          // fall through
          case 236: break;
          case 118:
            { yybegin(DATA_BODY_TYPE_END); return DATETIME;
            }
          // fall through
          case 237: break;
          case 119:
            { yybegin(DATA_BODY_TYPE_END); return NULLABLE;
            }
          // fall through
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
